<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc (version 1.7.0_09) on Fri Mar 15 02:03:30 GMT 2013 -->
<title>HexCell</title>
<meta name="date" content="2013-03-15">
<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
</head>
<body>
<script type="text/javascript"><!--
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="HexCell";
    }
//-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar_top">
<!--   -->
</a><a href="#skip-navbar_top" title="Skip navigation links"></a><a name="navbar_top_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/HexCell.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-files/index-1.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../reactogon/HelpWindow.html" title="class in reactogon"><span class="strong">Prev Class</span></a></li>
<li><a href="../reactogon/ImageLoader.html" title="class in reactogon"><span class="strong">Next Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../index.html?reactogon/HexCell.html" target="_top">Frames</a></li>
<li><a href="HexCell.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor_summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor_detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">reactogon</div>
<h2 title="Class HexCell" class="title">Class HexCell</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>reactogon.HexCell</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<hr>
<br>
<pre>public class <span class="strong">HexCell</span>
extends java.lang.Object</pre>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor_summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><strong><a href="../reactogon/HexCell.html#HexCell(reactogon.ImageLoader, int, int, int)">HexCell</a></strong>(<a href="../reactogon/ImageLoader.html" title="class in reactogon">ImageLoader</a>&nbsp;imageLoader,
       int&nbsp;i,
       int&nbsp;j,
       int&nbsp;note)</code>
<div class="block">Creates a hexagon, calculates dimensions, and image</div>
</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method_summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span>Methods</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../reactogon/HexCell.html#flipState()">flipState</a></strong>()</code>
<div class="block">Flips the state, if it is in the ON state (true) will turn it to the OFF
 state (false)</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>int[]</code></td>
<td class="colLast"><code><strong><a href="../reactogon/HexCell.html#getCornersX()">getCornersX</a></strong>()</code>
<div class="block">Gets the co-ordinates of all the corners of a hexagon (these points are
 where they will be drawn)</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>int[]</code></td>
<td class="colLast"><code><strong><a href="../reactogon/HexCell.html#getCornersY()">getCornersY</a></strong>()</code>
<div class="block">sets the co-ordinates of all the corners of a hexagon (these points are
 where they will be drawn)</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><strong><a href="../reactogon/HexCell.html#getCornerX()">getCornerX</a></strong>()</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><strong><a href="../reactogon/HexCell.html#getCornerY()">getCornerY</a></strong>()</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../reactogon/HexCell.html#getHasTile()">getHasTile</a></strong>()</code>
<div class="block">Maybe not needed becasue you can test tile == null, but...</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.awt.image.BufferedImage</code></td>
<td class="colLast"><code><strong><a href="../reactogon/HexCell.html#getImage()">getImage</a></strong>()</code>
<div class="block">Returns the image for the cell</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><strong><a href="../reactogon/HexCell.html#getNote()">getNote</a></strong>()</code>
<div class="block">Gets what note should be played by this hexagon cell</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../reactogon/HexCell.html#getPlayNote()">getPlayNote</a></strong>()</code>
<div class="block">It returns if a hexagon should play a note</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../reactogon/HexCell.html#getState()">getState</a></strong>()</code>
<div class="block">Gets the state of the cell, if TRUE it will light up</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code><a href="../reactogon/Tile.html" title="class in reactogon">Tile</a></code></td>
<td class="colLast"><code><strong><a href="../reactogon/HexCell.html#getTile()">getTile</a></strong>()</code>
<div class="block">Gets tile that is in the hexagon</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../reactogon/HexCell.html#refreshImage()">refreshImage</a></strong>()</code>
<div class="block">Refreshes image to make sure the cell has the correct image loaded</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../reactogon/HexCell.html#setHasTile(boolean)">setHasTile</a></strong>(boolean&nbsp;hasTile)</code>
<div class="block">Maybe not needed becasue you can test tile == null, but...</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../reactogon/HexCell.html#setImage(reactogon.Tile, boolean)">setImage</a></strong>(<a href="../reactogon/Tile.html" title="class in reactogon">Tile</a>&nbsp;tile,
        boolean&nbsp;state)</code>
<div class="block">Takes a tile and sets the respective image</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../reactogon/HexCell.html#setNote(int)">setNote</a></strong>(int&nbsp;note)</code>
<div class="block">Sets what note should be played by this hexagon cell</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../reactogon/HexCell.html#setPlayNote(boolean)">setPlayNote</a></strong>(boolean&nbsp;playNote)</code>
<div class="block">It sets if that cell should play a note</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../reactogon/HexCell.html#setState(boolean)">setState</a></strong>(boolean&nbsp;state)</code>
<div class="block">Sets the state of the hexagon, if true it will set the hexagon to light
 up, if false it will not</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../reactogon/HexCell.html#setTile(reactogon.Tile)">setTile</a></strong>(<a href="../reactogon/Tile.html" title="class in reactogon">Tile</a>&nbsp;tile)</code>
<div class="block">Sets the tile that should be placed in the hexagon cell</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods_inherited_from_class_java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>equals, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor_detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="HexCell(reactogon.ImageLoader, int, int, int)">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>HexCell</h4>
<pre>public&nbsp;HexCell(<a href="../reactogon/ImageLoader.html" title="class in reactogon">ImageLoader</a>&nbsp;imageLoader,
       int&nbsp;i,
       int&nbsp;j,
       int&nbsp;note)</pre>
<div class="block">Creates a hexagon, calculates dimensions, and image</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>radius</code> - radius of the hexagon</dd><dd><code>note</code> - the note for that hexagon</dd><dd><code>imageLoader</code> - images can then be loaded</dd></dl>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method_detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="refreshImage()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>refreshImage</h4>
<pre>public&nbsp;void&nbsp;refreshImage()</pre>
<div class="block">Refreshes image to make sure the cell has the correct image loaded</div>
</li>
</ul>
<a name="setImage(reactogon.Tile, boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setImage</h4>
<pre>public&nbsp;void&nbsp;setImage(<a href="../reactogon/Tile.html" title="class in reactogon">Tile</a>&nbsp;tile,
            boolean&nbsp;state)</pre>
<div class="block">Takes a tile and sets the respective image</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>tile</code> - if null, it will set it as a blank hexagon</dd></dl>
</li>
</ul>
<a name="getImage()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getImage</h4>
<pre>public&nbsp;java.awt.image.BufferedImage&nbsp;getImage()</pre>
<div class="block">Returns the image for the cell</div>
<dl><dt><span class="strong">Returns:</span></dt><dd></dd></dl>
</li>
</ul>
<a name="setState(boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setState</h4>
<pre>public&nbsp;void&nbsp;setState(boolean&nbsp;state)</pre>
<div class="block">Sets the state of the hexagon, if true it will set the hexagon to light
 up, if false it will not</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>state</code> - true will set the hexagon to be in an ON state</dd></dl>
</li>
</ul>
<a name="getState()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getState</h4>
<pre>public&nbsp;boolean&nbsp;getState()</pre>
<div class="block">Gets the state of the cell, if TRUE it will light up</div>
<dl><dt><span class="strong">Returns:</span></dt><dd>state a boolean of which state the cell is in (TRUE means light
         will be on and visa versa)</dd></dl>
</li>
</ul>
<a name="flipState()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>flipState</h4>
<pre>public&nbsp;void&nbsp;flipState()</pre>
<div class="block">Flips the state, if it is in the ON state (true) will turn it to the OFF
 state (false)</div>
</li>
</ul>
<a name="setTile(reactogon.Tile)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setTile</h4>
<pre>public&nbsp;void&nbsp;setTile(<a href="../reactogon/Tile.html" title="class in reactogon">Tile</a>&nbsp;tile)</pre>
<div class="block">Sets the tile that should be placed in the hexagon cell</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>tile</code> - </dd></dl>
</li>
</ul>
<a name="getTile()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getTile</h4>
<pre>public&nbsp;<a href="../reactogon/Tile.html" title="class in reactogon">Tile</a>&nbsp;getTile()</pre>
<div class="block">Gets tile that is in the hexagon</div>
<dl><dt><span class="strong">Returns:</span></dt><dd></dd></dl>
</li>
</ul>
<a name="setPlayNote(boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setPlayNote</h4>
<pre>public&nbsp;void&nbsp;setPlayNote(boolean&nbsp;playNote)</pre>
<div class="block">It sets if that cell should play a note</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>playNote</code> - </dd></dl>
</li>
</ul>
<a name="getPlayNote()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getPlayNote</h4>
<pre>public&nbsp;boolean&nbsp;getPlayNote()</pre>
<div class="block">It returns if a hexagon should play a note</div>
<dl><dt><span class="strong">Returns:</span></dt><dd></dd></dl>
</li>
</ul>
<a name="setNote(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setNote</h4>
<pre>public&nbsp;void&nbsp;setNote(int&nbsp;note)</pre>
<div class="block">Sets what note should be played by this hexagon cell</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>note</code> - </dd></dl>
</li>
</ul>
<a name="getNote()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getNote</h4>
<pre>public&nbsp;int&nbsp;getNote()</pre>
<div class="block">Gets what note should be played by this hexagon cell</div>
<dl><dt><span class="strong">Returns:</span></dt><dd></dd></dl>
</li>
</ul>
<a name="setHasTile(boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setHasTile</h4>
<pre>public&nbsp;void&nbsp;setHasTile(boolean&nbsp;hasTile)</pre>
<div class="block">Maybe not needed becasue you can test tile == null, but... it sets a
 boolean of is that cell has a tile in it</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>hasTile</code> - </dd></dl>
</li>
</ul>
<a name="getHasTile()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getHasTile</h4>
<pre>public&nbsp;boolean&nbsp;getHasTile()</pre>
<div class="block">Maybe not needed becasue you can test tile == null, but... returns if the
 hexegon has a tile in it</div>
<dl><dt><span class="strong">Returns:</span></dt><dd></dd></dl>
</li>
</ul>
<a name="getCornersX()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getCornersX</h4>
<pre>public&nbsp;int[]&nbsp;getCornersX()</pre>
<div class="block">Gets the co-ordinates of all the corners of a hexagon (these points are
 where they will be drawn)</div>
<dl><dt><span class="strong">Returns:</span></dt><dd></dd></dl>
</li>
</ul>
<a name="getCornersY()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getCornersY</h4>
<pre>public&nbsp;int[]&nbsp;getCornersY()</pre>
<div class="block">sets the co-ordinates of all the corners of a hexagon (these points are
 where they will be drawn)</div>
<dl><dt><span class="strong">Returns:</span></dt><dd></dd></dl>
</li>
</ul>
<a name="getCornerX()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getCornerX</h4>
<pre>public&nbsp;int&nbsp;getCornerX()</pre>
</li>
</ul>
<a name="getCornerY()">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>getCornerY</h4>
<pre>public&nbsp;int&nbsp;getCornerY()</pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar_bottom">
<!--   -->
</a><a href="#skip-navbar_bottom" title="Skip navigation links"></a><a name="navbar_bottom_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/HexCell.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-files/index-1.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../reactogon/HelpWindow.html" title="class in reactogon"><span class="strong">Prev Class</span></a></li>
<li><a href="../reactogon/ImageLoader.html" title="class in reactogon"><span class="strong">Next Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../index.html?reactogon/HexCell.html" target="_top">Frames</a></li>
<li><a href="HexCell.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor_summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor_detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
